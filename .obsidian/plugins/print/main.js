/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var M=Object.create;var m=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var R=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),U=(i,e)=>{for(var t in e)m(i,t,{get:e[t],enumerable:!0})},z=(i,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of B(e))!O.call(i,n)&&n!==t&&m(i,n,{get:()=>e[n],enumerable:!(s=_(e,n))||s.enumerable});return i};var H=(i,e,t)=>(t=i!=null?M(V(i)):{},z(e||!i||!i.__esModule?m(t,"default",{value:i,enumerable:!0}):t,i)),j=i=>z(m({},"__esModule",{value:!0}),i);var L=R(c=>{"use strict";Object.defineProperty(c,"__esModule",{value:!0});c.Printd=c.createIFrame=c.createLinkStyle=c.createStyle=void 0;var G=/^(((http[s]?)|file):)?(\/\/)+([0-9a-zA-Z-_.=?&].+)$/,W=/^((\.|\.\.)?\/)([0-9a-zA-Z-_.=?&]+\/)*([0-9a-zA-Z-_.=?&]+)$/,F=function(i){return G.test(i)||W.test(i)};function A(i,e){var t=i.createElement("style");return t.appendChild(i.createTextNode(e)),t}c.createStyle=A;function k(i,e){var t=i.createElement("link");return t.type="text/css",t.rel="stylesheet",t.href=e,t}c.createLinkStyle=k;function x(i){var e=window.document.createElement("iframe");return e.setAttribute("src","about:blank"),e.setAttribute("style","visibility:hidden;width:0;height:0;position:absolute;z-index:-9999;bottom:0;"),e.setAttribute("width","0"),e.setAttribute("height","0"),e.setAttribute("wmode","opaque"),i.appendChild(e),e}c.createIFrame=x;var Z={parent:window.document.body,headElements:[],bodyElements:[]},N=function(){function i(e){this.isLoading=!1,this.hasEvents=!1,this.opts=[Z,e||{}].reduce(function(t,s){return Object.keys(s).forEach(function(n){return t[n]=s[n]}),t},{}),this.iframe=x(this.opts.parent)}return i.prototype.getIFrame=function(){return this.iframe},i.prototype.print=function(e,t,s,n){if(!this.isLoading){var o=this.iframe,h=o.contentDocument,a=o.contentWindow;if(!(!h||!a)&&(this.iframe.src="about:blank",this.elCopy=e.cloneNode(!0),!!this.elCopy)){this.isLoading=!0,this.callback=n;var r=a.document;r.open(),r.write('<!DOCTYPE html><html><head><meta charset="utf-8"></head><body></body></html>'),this.addEvents();var u=this.opts,g=u.headElements,C=u.bodyElements;Array.isArray(g)&&g.forEach(function(l){return r.head.appendChild(l)}),Array.isArray(C)&&C.forEach(function(l){return r.body.appendChild(l)}),Array.isArray(t)&&t.forEach(function(l){l&&r.head.appendChild(F(l)?k(r,l):A(r,l))}),r.body.appendChild(this.elCopy),Array.isArray(s)&&s.forEach(function(l){if(l){var w=r.createElement("script");F(l)?w.src=l:w.innerText=l,r.body.appendChild(w)}}),r.close()}}},i.prototype.printURL=function(e,t){this.isLoading||(this.addEvents(),this.isLoading=!0,this.callback=t,this.iframe.src=e)},i.prototype.onBeforePrint=function(e){this.onbeforeprint=e},i.prototype.onAfterPrint=function(e){this.onafterprint=e},i.prototype.launchPrint=function(e){this.isLoading||e.print()},i.prototype.addEvents=function(){var e=this;if(!this.hasEvents){this.hasEvents=!0,this.iframe.addEventListener("load",function(){return e.onLoad()},!1);var t=this.iframe.contentWindow;t&&(this.onbeforeprint&&t.addEventListener("beforeprint",this.onbeforeprint),this.onafterprint&&t.addEventListener("afterprint",this.onafterprint))}},i.prototype.onLoad=function(){var e=this;if(this.iframe){this.isLoading=!1;var t=this.iframe,s=t.contentDocument,n=t.contentWindow;if(!s||!n)return;typeof this.callback=="function"?this.callback({iframe:this.iframe,element:this.elCopy,launchPrint:function(){return e.launchPrint(n)}}):this.launchPrint(n)}},i}();c.Printd=N;c.default=N});var q={};U(q,{default:()=>b});module.exports=j(q);var d=require("obsidian");var p=require("obsidian"),y=class extends p.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}display(){let{containerEl:t}=this;t.empty(),new p.Setting(t).setName("Print note title").setDesc("Include the note title in the printout.").addToggle(n=>n.setValue(this.plugin.settings.printTitle).onChange(async o=>{this.plugin.settings.printTitle=o,await this.plugin.saveSettings()})),new p.Setting(t).setName("Font size").setDesc("Set the font size for the printed note.").addText(n=>n.setPlaceholder("14px").setValue(this.plugin.settings.fontSize).onChange(async o=>{this.plugin.settings.fontSize=o,await this.plugin.saveSettings()})),["h1Size","h2Size","h3Size","h4Size","h5Size","h6Size"].forEach((n,o)=>{new p.Setting(t).setName(`Heading ${o+1} size`).setDesc(`Set the size for <h${o+1}> elements.`).addText(h=>h.setPlaceholder(`${this.plugin.settings[n]}`).setValue(this.plugin.settings[n]).onChange(async a=>{this.plugin.settings[n]=a,await this.plugin.saveSettings()}))}),new p.Setting(t).setName("Combine folder notes").setDesc("When printing a folder, combine all notes into a single document. If disabled, each note will start on a new page.").addToggle(n=>n.setValue(this.plugin.settings.combineFolderNotes).onChange(async o=>{this.plugin.settings.combineFolderNotes=o,await this.plugin.saveSettings()})),new p.Setting(t).setName("Treat horizontal lines as page breaks").setDesc("Enable this option to interpret horizontal lines (---) as page breaks ").addToggle(n=>n.setValue(this.plugin.settings.hrPageBreaks).onChange(async o=>{this.plugin.settings.hrPageBreaks=o,await this.plugin.saveSettings()})),new p.Setting(t).setName("Debug mode").setDesc("Enable debug mode. This will open the print window for inspection.").addToggle(n=>n.setValue(this.plugin.settings.debugMode).onChange(async o=>{this.plugin.settings.debugMode=o,await this.plugin.saveSettings()})),new p.Setting(t).setName("Custom CSS").setDesc("You can add custom print styles by adding a `print.css` snippet. The print window's body uses the `obsidian-print` class, so you can prefix your custom print styles accordingly.")}};var T={printTitle:!0,fontSize:"14px",h1Size:"20px",h2Size:"18px",h3Size:"16px",h4Size:"14px",h5Size:"14px",h6Size:"12px",combineFolderNotes:!1,hrPageBreaks:!1,debugMode:!1};var D=H(L());async function S(i,e,t){let s=document.createElement("html"),n=document.createElement("head"),o=document.createElement("title");if(o.textContent="Print note",n.appendChild(o),e.debugMode){let r=document.createElement("style");r.textContent=t,n.appendChild(r)}s.appendChild(n);let h=document.createElement("body");if(h.className="obsidian-print",h.appendChild(i),s.appendChild(h),e.debugMode){let{remote:r}=window.require("electron"),u=new r.BrowserWindow({width:800,height:600,show:!0,webPreferences:{nodeIntegration:!0,contextIsolation:!1}}),g=s.outerHTML;u.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(g)}`),u.webContents.on("did-finish-load",()=>{u.webContents.openDevTools()})}new D.Printd().print(s,[t])}var f=require("obsidian");async function P(i,e){let t=createDiv();if(e){let n=t.createEl("h1");n.textContent=i.basename||""}let s=await this.app.vault.read(i);if(await f.MarkdownRenderer.render(this.app,s,t,i.path,new f.Component),!t){new f.Notice("Failed to retrieve note content.");return}return t.addClass("obsidian-print-note"),t}var v=require("obsidian");async function E(i,e,t){let s=i.vault.adapter,n="",o="";if(e.dir){let a=`${e.dir}/styles.css`;try{n=await s.read(a)}catch(r){new v.Notice("Default styling could not be located.")}}else new v.Notice("Could not find the plugin path. No default print styles will be added.");let h=`${i.vault.configDir}/snippets/print.css`;try{o=await s.read(h)}catch(a){}return`
        body { font-size: ${t.fontSize}; }
        h1 { font-size: ${t.h1Size}; }
        h2 { font-size: ${t.h2Size}; }
        h3 { font-size: ${t.h3Size}; }
        h4 { font-size: ${t.h4Size}; }
        h5 { font-size: ${t.h5Size}; }
        h6 { font-size: ${t.h6Size}; }
        hr { page-break-before: ${t.hrPageBreaks?"always":"auto"}; border-width: ${t.hrPageBreaks?"0":"revert-layer"}; }
        ${n}
        ${o}
    `}var $=require("obsidian");async function I(i){let e=i.workspace.getActiveFile();if(e){let t=e.parent;if(t instanceof $.TFolder)return t}return null}var b=class extends d.Plugin{async onload(){this.settings=Object.assign({},T,await this.loadData()),this.addCommand({id:"print-note",name:"Current note",callback:()=>this.printNote()}),this.addCommand({id:"print-folder-notes",name:"All notes in current folder",callback:()=>this.printFolder()}),this.addSettingTab(new y(this.app,this)),this.addRibbonIcon("printer","Print note",t=>{this.printNote()}),this.registerEvent(this.app.workspace.on("file-menu",(t,s)=>{s instanceof d.TFile?t.addItem(n=>{n.setTitle("Print note").setIcon("printer").onClick(()=>this.printNote(s))}):s instanceof d.TFolder&&t.addItem(n=>{n.setTitle("Print all notes in folder").setIcon("printer").onClick(()=>this.printFolder(s))})}))}async printNote(t){t||await this.saveActiveFile();let s=t||this.app.workspace.getActiveFile();if(!s){new d.Notice("No note to print.");return}let n=await P(s,this.settings.printTitle),o=await E(this.app,this.manifest,this.settings);!n||await S(n,this.settings,o)}async printFolder(t){t||await this.saveActiveFile();let s=t||await I(this.app);if(!s){new d.Notice("Could not resolve folder.");return}let n=s.children.filter(a=>a instanceof d.TFile&&a.extension==="md");if(n.length===0){new d.Notice("No markdown files found in the folder.");return}let o=createDiv();for(let a of n){let r=await P(a,this.settings.printTitle);!r||(this.settings.combineFolderNotes||r.addClass("obsidian-print-page-break"),o.append(r))}let h=await E(this.app,this.manifest,this.settings);await S(o,this.settings,h)}async saveActiveFile(){let t=this.app.workspace.getActiveViewOfType(d.MarkdownView);t&&await t.save()}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */